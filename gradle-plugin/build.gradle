apply from: '../../dopplversions.gradle'

buildscript {
    repositories {
        jcenter()
        ivy { url dopplIvyDeploy }
        maven{
            url 'http://spoon.gforge.inria.fr/repositories/releases'
        }
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'doppl.fr.inria.gforge.spoon:spoon-gradle-plugin:1.0-SNAPSHOT'
    }
}

apply plugin: 'groovy'
//apply plugin: 'maven'
//apply plugin: 'maven-publish'
apply plugin: 'ivy-publish'
//apply plugin: 'com.jfrog.artifactory'
//apply plugin: 'com.jfrog.bintray'

def props = new Properties()
props.load(new FileInputStream("${rootDir}/../realm.properties"))
props.each { key, val ->
    project.ext.set(key, val)
}

repositories {
    mavenLocal()
    jcenter()
    ivy { url dopplIvyDeploy }
    maven{
        url 'http://spoon.gforge.inria.fr/repositories/releases'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'io.realm'
version = baseRealmVersion

configurations {
    provided
    compile.extendsFrom provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
//    compile "io.realm:realm-transformer:${version}"
    compile "io.realm:realm-annotations:${version}"
    compile 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    provided 'com.android.tools.build:gradle:2.1.0'
    compile 'doppl.fr.inria.gforge.spoon:spoon-gradle-plugin:1.0-SNAPSHOT'
    compile('fr.inria.gforge.spoon:spoon-core:5.4.0') {
        exclude group: 'org.eclipse.jdt', module: 'org.eclipse.jdt.core'
    }

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
}

//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.java'
    into 'build/generated-src/main/java/io/realm'
    filter(ReplaceTokens, tokens: [version: version])
    outputs.upToDateWhen { false }
}

// Include the generated Version file
sourceSets {
    main {
        java {
            srcDir 'build/generated-src/main/java'
        }
    }
}

compileJava.dependsOn generateVersionClass

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
}

publishing {
    publications {
        ivy(IvyPublication) {
            from components.java
            module 'realm-gradle-plugin'
        }
    }

    repositories {
        ivy { url dopplIvyDeploy }
    }
}

